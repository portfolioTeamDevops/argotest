name: CI-CD

permissions:
  contents: write # allow runner to write to the repository
on:
  push:
    branches: 
      - main
      

env:
  IMAGE_NAME: baruchi-pipelines

jobs:
  # gitleaks-scan: # this all section will be added once license is added
  #   name: Gitleaks Secrets Scan
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Run Gitleaks
  #       uses: gitleaks/gitleaks-action@v2
  #       with:
  #         fail: true                   # failing ci if secrets are found
  #         # config-path: .gitleaks.toml  # optional configuration file and its path
  test:
    name: Run Tests
    # needs: gitleaks-scan # as this is an organization repo, we need lisence for gitleaks, whenever fixed this will be applied. for now it runs sepratly
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Get dependencies
      working-directory: ./app # inside the container path
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    # - name: Lint with flake8
    #   run: flake8 .
    
    # - name: Security scan with Bandit
    #   run: bandit -r . -s B101
    
  build-image:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Bump version and set IMAGE_TAG
      id: versioning
      run: |
        git fetch --tags

        # Get the highest version tag (regardless of branch history)
        TAG=$(git tag --sort=-v:refname | head -n 1)
        TAG=${TAG:-v1.0.0}

        VERSION=${TAG#v}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
        PATCH=$((PATCH + 1))
        NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"

        echo "IMAGE_TAG=${NEW_VERSION}" >> $GITHUB_ENV
        echo "tag=${NEW_VERSION}" >> $GITHUB_OUTPUT

        git config user.name "github-actions-runner"
        git config user.email "github-actions-runner@github.com"

        # Only create tag if it doesn't already exist
        if git rev-parse "$NEW_VERSION" >/dev/null 2>&1; then
          echo "Tag $NEW_VERSION already exists, skipping creation."
        else
          git tag $NEW_VERSION
          git push origin $NEW_VERSION
        fi
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PAT }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: . # repo path
        file: ./Dockerfile # repo file path
        push: true
        tags: ${{ secrets.DOCKER_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} # push the image to the repositoryI
        
    - name: Save Docker version info to file
      run: echo "${{ env.IMAGE_TAG }}" > docker-version.txt

    - name: Upload Docker version as artifact
      uses: actions/upload-artifact@v4
      with:
        path: docker-version.txt
        name: docker-version
  update-helm-and-push:
    needs: build-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "ci@github.com"

      - name: Update Helm values and Chart with new image tag
        run: |
          TAG="${IMAGE_TAG}"

          echo "Updating Helm chart with Docker tag: $TAG"

          # Update appVersion in Chart.yaml
          sed -i -E "s/^appVersion:.*$/appVersion: \"${TAG#v}\"/" k8s/helm/baruchi-chart/Chart.yaml

          # Update image tag in values.yaml (preserving indentation)
          sed -i -E "s/^([[:space:]]*)tag:.*$/\1tag: \"${TAG}\"/" k8s/helm/baruchi-chart/values.yaml

          echo "==== Chart.yaml ===="
          cat k8s/helm/baruchi-chart/Chart.yaml
          echo "==== values.yaml ===="
          cat k8s/helm/baruchi-chart/values.yaml

      - name: Commit and push updated chart
        run: |
          git add k8s/helm/baruchi-chart/Chart.yaml k8s/helm/baruchi-chart/values.yaml

          git commit -m "CI: update Helm image tag to ${IMAGE_TAG} [skip ci]" || echo "No changes to commit"
          git push origin main